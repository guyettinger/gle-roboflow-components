{"version":3,"file":"RoboflowObjectDetectionCanvas.stories-ef90ea8e.js","sources":["../../src/components/RoboflowObjectDetectionCanvas/RoboflowObjectDetectionCanvas.tsx"],"sourcesContent":["import { useEffect, useRef } from \"react\";\nimport styled from \"styled-components\"\nimport {\n    RoboflowObjectDetection\n} from \"../../services/roboflowModule/roboflowModuleService.types\";\nimport {\n    RoboflowObjectDetectionCanvasProps\n} from \"../RoboflowObjectDetectionCanvas/RoboflowObjectDetectionCanvas.types\";\n\nconst ObjectDetectionCanvas = styled.canvas`\n  position: absolute;\n  top: 0;\n  left: 0;\n`\n\nexport const RoboflowObjectDetectionCanvas = (\n    {\n        width,\n        height,\n        objectDetections,\n        mirrored = false\n    }: RoboflowObjectDetectionCanvasProps) => {\n    const canvasRef = useRef<HTMLCanvasElement>(null)\n\n    useEffect(() => {\n        const canvas = canvasRef?.current\n        if (!canvas) return\n\n        // adjust the canvas size to match the video\n        adjustCanvas(width, height)\n\n        const canvasContext = canvas.getContext(\"2d\")\n        if (!canvasContext) return\n\n        drawBoxes(objectDetections, canvasContext)\n\n    }, [width, height, objectDetections]);\n\n    const adjustCanvas = (width: number, height: number) => {\n        const canvas = canvasRef?.current\n        if (!canvas) return\n\n        canvas.width = width * window.devicePixelRatio\n        canvas.height = height * window.devicePixelRatio\n\n        canvas.style.width = width + \"px\"\n        canvas.style.height = height + \"px\"\n\n        const canvasContext = canvas.getContext(\"2d\")\n        if (!canvasContext) return\n        canvasContext.scale(window.devicePixelRatio, window.devicePixelRatio)\n    }\n\n    const drawBoxes = (detections: RoboflowObjectDetection[], canvasContext: CanvasRenderingContext2D) => {\n        const canvas = canvasRef?.current\n        if (!canvas) return\n\n        canvasContext.clearRect(0, 0, canvas.width, canvas.height)\n        detections.forEach((row: any) => {\n            //video\n            let temp = row.bbox\n            temp.class = row.class\n            temp.color = row.color\n            temp.confidence = row.confidence\n            row = temp\n\n            if (row.confidence < 0) return\n\n            //dimensions\n            if(mirrored){\n                row.x = width - row.x\n            }\n\n            let x = row.x - row.width / 2\n            let y = row.y - row.height / 2\n            let w = row.width\n            let h = row.height\n\n            //box\n            canvasContext.beginPath()\n            canvasContext.lineWidth = 1\n            canvasContext.strokeStyle = row.color\n            canvasContext.rect(x, y, w, h)\n            canvasContext.stroke()\n\n            //shade\n            canvasContext.fillStyle = \"black\"\n            canvasContext.globalAlpha = 0.2\n            canvasContext.fillRect(x, y, w, h)\n            canvasContext.globalAlpha = 1.0\n\n            //label\n            let fontColor = \"black\"\n            let fontSize = 12\n            canvasContext.font = `${fontSize}px monospace`\n            canvasContext.textAlign = \"center\"\n            let classTxt = row.class\n            let confTxt = (row.confidence * 100).toFixed().toString() + \"%\"\n            let msgTxt = classTxt + \" \" + confTxt\n            const textHeight = fontSize\n            let textWidth = canvasContext.measureText(msgTxt).width\n\n            if (textHeight <= h && textWidth <= w) {\n                canvasContext.strokeStyle = row.color\n                canvasContext.fillStyle = row.color\n                canvasContext.fillRect(\n                    x - canvasContext.lineWidth / 2,\n                    y - textHeight - canvasContext.lineWidth,\n                    textWidth + 2,\n                    textHeight + 1\n                );\n                canvasContext.stroke()\n                canvasContext.fillStyle = fontColor\n                canvasContext.fillText(msgTxt, x + textWidth / 2 + 1, y - 1)\n            } else {\n                textWidth = canvasContext.measureText(confTxt).width\n                canvasContext.strokeStyle = row.color\n                canvasContext.fillStyle = row.color\n                canvasContext.fillRect(\n                    x - canvasContext.lineWidth / 2,\n                    y - textHeight - canvasContext.lineWidth,\n                    textWidth + 2,\n                    textHeight + 1\n                )\n                canvasContext.stroke()\n                canvasContext.fillStyle = fontColor\n                canvasContext.fillText(confTxt, x + textWidth / 2 + 1, y - 1)\n            }\n        })\n    }\n\n    return (\n        <ObjectDetectionCanvas\n            ref={canvasRef}\n        />\n    )\n}\n"],"names":["ObjectDetectionCanvas","styled","RoboflowObjectDetectionCanvas","width","height","objectDetections","mirrored","canvasRef","useRef","useEffect","canvas","adjustCanvas","canvasContext","drawBoxes","width2","height2","detections","row","temp","x","y","w","h","fontColor","fontSize","classTxt","confTxt","msgTxt","textHeight","textWidth","jsx"],"mappings":"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"}